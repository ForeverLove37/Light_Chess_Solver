好的，遵照您的要求，我将第一版的严谨技术结构与第二版的用户体验和美学设计深度整合，为您呈现一份全面、详尽、可执行的最终项目企划书。

---

## **“光影矩阵 (Lights Matrix)” 智能求解器 综合项目企划书**

### **1. 项目愿景与概述**

#### **1.1 项目名称**
光影矩阵 (Lights Matrix)

#### **1.2 项目愿景**
本项目旨在打造一个**优雅、有趣且富有启发性**的互动数字艺术品。它不仅仅是一个“正反棋 (Lights Out)”的解题工具，更是一个集成了流畅交互、精美视觉和教育探索的沉浸式解谜 Web 应用。

#### **1.3 核心价值**
*   **趣味性与竞技性：** 提供经典解谜、限时挑战和玩家自定义分享模式，满足不同用户的需求。
*   **教育性与启发性：** 通过可视化方式，揭示游戏背后有趣的数学原理（线性代数），激发用户的探索欲。
*   **技术与艺术的结合：** 作为一个全栈项目，它展示了从后端高效算法到前端精美动画的全流程现代 Web 开发实践。

### **2. 核心机制与算法分析**

#### **2.1 游戏规则形式化**
*   **棋盘 (Board):** 一个 `m x n` 的矩阵。
*   **状态 (State):** 每个棋格 `(i, j)` 有两种状态：反 (Off, 记为 0) 或 正 (On, 记为 1)。
*   **目标 (Goal):** 将棋盘上所有棋格的状态变为 正 (1)。
*   **操作 (Operation):** 点击（翻转）棋格 `(i, j)`，会使其自身以及其所有上下左右相邻（在边界内）的棋格状态翻转（0 变 1，1 变 0）。

#### **2.2 求解算法核心：模2线性代数**
这个问题的关键特性是：**在同一个位置点击两次等于没有点击** (`1 + 1 = 0 mod 2`)。这使其可以完美地转化为一个在有限域 `GF(2)` 上的线性方程组。

*   **构建方程组:** 我们可以为棋盘上 `m*n` 个位置分别设立一个变量 `x`（1代表点击，0代表不点击）。每个位置的最终状态都构成一个方程，最终形成一个 `m*n` 元线性方程组。
*   **求解方法:** 使用**高斯消元法 (Gaussian Elimination)** 在 `GF(2)` 域上求解这个方程组。该方法效率极高，可以快速判断问题是否有解，并给出唯一的最优解（最少步数解）。
*   **结论:** 后端求解器的核心就是实现一个基于模2运算的高斯消元算法。

### **3. 功能规格详述**

#### **3.1 核心功能**
1.  **动态交互棋盘:**
    *   用户可自定义棋盘的行数 `m` 和列数 `n`。
    *   完全响应式设计，无缝适配桌面和移动设备。
    *   支持用户自由点击棋盘，设置初始状态或进行手动解谜。
2.  **一键智能求解:**
    *   用户可随时将当前棋盘状态发送给后端，获取最优解法步骤。
3.  **解法分步可视化:**
    *   系统获取解法后，不会立即完成，而是提供“上一步”/“下一步”的交互。
    *   通过高亮和动画清晰地指示每一步应点击的位置，并展示翻转效果。

#### **3.2 增强游戏模式**
1.  **挑战模式 (Challenge Mode):**
    *   系统随机生成一个有解且具一定难度的谜题。
    *   可加入步数和时间限制，并设立排行榜，增加竞技性。
2.  **创作与分享模式 (Creative Mode):**
    *   用户可设计自己的谜题，并生成一个包含棋盘状态的**唯一分享链接**。
    *   朋友通过链接即可挑战你设计的谜题，实现社交互动。

#### **3.3 用户体验 (QoL) 与探索功能**
1.  **无限撤销/重做 (Undo/Redo):** 允许用户在手动解谜时自由回退或重做操作。
2.  **智能提示系统 (Hint System):** 用户点击“提示”时，系统仅高亮显示**下一步**的最优操作，引导用户思考。
3.  **进度自动保存:** 使用浏览器 `localStorage` 保存用户会话，刷新后可恢复。
4.  **影响范围可视化:** 当鼠标**悬停**在格子上时，动态高亮显示点击该格会影响到的所有格子。
5.  **“解法探秘”模块:** 通过交互式弹窗，用可视化的方式简单解释求解器背后的数学原理。
6.  **统计与成就系统:** 记录用户数据（解谜数、最快时间等）并设立成就激励。

### **4. 美学与交互设计指南**

#### **4.1 整体风格与布局**
*   **风格:** 现代、极简、科技感，参考数据可视化或科幻电影 UI。
*   **布局:** 桌面端采用经典三栏式（设置 | 棋盘 | 控制台），移动端采用单栏式（状态 | 棋盘 | 底部控制面板），确保信息清晰，聚焦核心。
*   **色彩与主题:**
    *   **深色模式 (默认):** 深邃背景搭配高亮霓虹色（青/品红），营造科技氛围。
    *   **浅色模式:** 简洁典雅，适合日间使用。
    *   **高对比度模式:** 确保应用的无障碍访问性 (Accessibility)。

#### **4.2 核心动画与微交互**
*   **翻转动画:** 核心交互。采用 **3D卡片式翻转** (`transform: rotateY`) 或 **光晕扩散** (`box-shadow` 动画)，而非简单的颜色切换。
*   **点击涟漪:** 点击一个格子后，一个视觉涟漪从该点向所有受影响的格子扩散，然后触发它们的翻转动画，提供强烈的因果反馈。
*   **求解指示:** 获取解法后，所有待点击的格子会以**微弱呼吸灯**的效果标出。执行“下一步”时，对应的格子高亮并执行翻转。
*   **胜利动画:** 棋盘全亮时，触发优雅的庆祝动画，如粒子效果或光波流过整个棋盘。
*   **音效:** 为翻转、按钮点击、解谜成功等关键操作配备清脆的科技感音效（用户可关闭）。

### **5. 系统架构与技术规格**

#### **5.1 架构**
采用**前后端分离**架构，通过 RESTful API 进行通信。

#### **5.2 前端 (Frontend)**
*   **职责:** UI 渲染、复杂状态管理、用户交互、动画实现、API 请求。
*   **技术栈 (建议):**
    *   **框架:** React 或 Vue.js
    *   **状态管理:** Redux Toolkit (React) 或 Pinia (Vue)
    *   **样式:** Tailwind CSS (快速构建) + CSS Modules (组件隔离)
    *   **动画:** CSS Transitions/Animations, Framer Motion (可选，用于复杂动画)

#### **5.3 后端 (Backend)**
*   **职责:** 接收棋盘状态、运行求解算法、返回解法。
*   **技术栈 (建议):**
    *   **框架:** Node.js + Express/Fastify 或 Python + FastAPI
    *   **核心算法:** 自行实现或使用库完成 `GF(2)` 域上的高斯消元。

#### **5.4 API 设计**
*   **Endpoint:** `POST /api/solve`
*   **Request Body (JSON):**
    ```json
    {
      "rows": 3,
      "cols": 3,
      "board": [ [0, 0, 1], [0, 1, 0], [1, 0, 0] ]
    }
    ```
*   **Success Response (JSON):**
    ```json
    {
      "status": "solvable",
      "solution": [ {"x": 0, "y": 0}, {"x": 1, "y": 2} ]
    }
    ```
*   **Failure Response (JSON):**
    ```json
    { "status": "unsolvable", "message": "This configuration has no solution." }
    ```

### **6. 开发路线图 (Milestones)**

**第一阶段：核心功能实现 (后端先行)**
1.   实现后端求解算法并通过单元测试。搭建 API 服务器，完成 `/api/solve` 接口并通过工具测试。

**第二阶段：基础前端与集成**
2.   搭建前端项目，实现动态棋盘渲染与用户点击交互。完成前后端对接，确保点击“求解”能获取数据。

**第三阶段：可视化与交互增强**
3.   实现解法步骤的可视化与分步控制。开发核心的翻转、涟漪、高亮等动画效果。
4.   实现主题切换、撤销/重做、智能提示和影响范围可视化等 QoL 功能。

**第四阶段：高级功能与打磨**
5.   开发挑战模式和创作分享模式。完善统计与成就系统。
6.  进行全面的 UI/UX 审查与优化，添加音效，修复所有已知 Bug。


请将端口开在127.0.0.1:6666，以便我去测试